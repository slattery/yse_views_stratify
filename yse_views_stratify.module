<?php

/**
 * @file
 * YSE Views Stratify module.
 *
 * Provides convention-based view stratification to split results into
 * exclusive and remainder sets based on display machine names.
 */

use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;

/**
 * Implements hook_views_query_alter().
 *
 * Alters views queries to stratify results based on display machine names.
 * Displays with 'exclusive_rows' in their name show only entities from the
 * stratify query, while displays with 'remainder_rows' show all others.
 *
 * Also applies inherited contextual filters to embed_stratify_query displays
 * when they are executed with inherited filter configuration.
 */
function yse_views_stratify_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  // First, check if this view has inherited filters to apply.
  if (isset($view->yse_inherited_filters) && $view->current_display === 'embed_stratify_query') {
    $inherited = $view->yse_inherited_filters;
    $filters = $inherited['filters'] ?? [];
    $args = $inherited['args'] ?? [];

    // Apply each inherited filter to the query.
    $arg_index = 0;
    foreach ($filters as $filter_id => $filter_handler) {
      if (!isset($args[$arg_index])) {
        continue;
      }

      $arg_value = $args[$arg_index];

      try {
        // Ensure the relationship/join exists for this field.
        $table = $filter_handler->table ?? NULL;
        $field = $filter_handler->realField ?? $filter_handler->field ?? NULL;
        $relationship = $filter_handler->relationship ?? NULL;

        if (!$table || !$field) {
          continue;
        }

        // Ensure the table is added to the query with proper join.
        if (method_exists($query, 'ensureTable')) {
          $alias = $query->ensureTable($table, $relationship);

          // Now add the WHERE condition using the alias.
          if (method_exists($query, 'addWhere')) {
            $query->addWhere(0, "{$alias}.{$field}", $arg_value, '=');
          }
        }
      }
      catch (\Exception $e) {
        \Drupal::logger('yse_views_stratify')->error(
          'Error applying inherited filter @id: @message',
          [
            '@id' => $filter_id,
            '@message' => $e->getMessage(),
          ]
        );
      }

      $arg_index++;
    }
  }

  // Then apply stratification logic.
  $service = \Drupal::service('yse_views_stratify.views_stratify');
  $service->alterQuery($view, $query);
}

/**
 * Implements hook_views_pre_render().
 *
 * Adds appropriate cache tags to views that use stratification.
 */
function yse_views_stratify_views_pre_render(ViewExecutable $view) {
  // Get our service to handle cache tag addition.
  $service = \Drupal::service('yse_views_stratify.views_stratify');
  $service->addCacheTags($view);
}

/**
 * Implements hook_theme_suggestions_views_view().
 *
 * Adds theme suggestions for views that contain an embed_stratify_query display.
 */
function yse_views_stratify_theme_suggestions_views_view(array $variables): array {
  $suggestions = [];
  $view = $variables['view'];

  // Check if this view has an embed_stratify_query display.
  $displays = $view->storage->get('display');
  if (!isset($displays['embed_stratify_query'])) {
    return $suggestions;
  }

  // Add generic views-stratify suggestion.
  $suggestions[] = 'views_view__views_stratify';

  $display_id = $view->current_display;

  // Only add display-specific suggestions if this is NOT an embedded view.
  // When a view is embedded within another view, $view->parent is set,
  // and we should not add exclusive_rows/remainder_rows suggestions at the
  // top level to avoid polluting the suggestion list.
  if (empty($view->parent)) {
    // Add suggestions for exclusive_rows displays.
    if (strpos($display_id, 'exclusive_rows') !== FALSE) {
      $suggestions[] = 'views_view__' . $view->id() . '__exclusive_rows';
      $suggestions[] = 'views_view__views_stratify__exclusive_rows';
    }

    // Add suggestions for remainder_rows displays.
    if (strpos($display_id, 'remainder_rows') !== FALSE) {
      $suggestions[] = 'views_view__' . $view->id() . '__remainder_rows';
      $suggestions[] = 'views_view__views_stratify__remainder_rows';
    }
  }

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_views_view_fields().
 *
 * Adds theme suggestions for view fields in stratified views.
 */
function yse_views_stratify_theme_suggestions_views_view_fields(array $variables): array {
  $suggestions = [];
  $view = $variables['view'];

  // Check if this view has an embed_stratify_query display.
  $displays = $view->storage->get('display');
  if (!isset($displays['embed_stratify_query'])) {
    return $suggestions;
  }

  // Add generic views-stratify suggestion.
  $suggestions[] = 'views_view_fields__views_stratify';

  $display_id = $view->current_display;

  // Add suggestions for exclusive_rows displays.
  if (strpos($display_id, 'exclusive_rows') !== FALSE) {
    $suggestions[] = 'views_view_fields__' . $view->id() . '__exclusive_rows';
    $suggestions[] = 'views_view_fields__views_stratify__exclusive_rows';
  }

  // Add suggestions for remainder_rows displays.
  if (strpos($display_id, 'remainder_rows') !== FALSE) {
    $suggestions[] = 'views_view_fields__' . $view->id() . '__remainder_rows';
    $suggestions[] = 'views_view_fields__views_stratify__remainder_rows';
  }

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_views_view_field().
 *
 * Adds theme suggestions for individual view fields in stratified views.
 */
function yse_views_stratify_theme_suggestions_views_view_field(array $variables): array {
  $suggestions = [];
  $view = $variables['view'];

  // Check if this view has an embed_stratify_query display.
  $displays = $view->storage->get('display');
  if (!isset($displays['embed_stratify_query'])) {
    return $suggestions;
  }

  $display_id = $view->current_display;

  // Add suggestions for exclusive_rows displays.
  if (strpos($display_id, 'exclusive_rows') !== FALSE) {
    $suggestions[] = 'views_view_field__views_stratify__exclusive_rows';
    $suggestions[] = 'views_view_field__' . $view->id() . '__exclusive_rows';
  }

  // Add suggestions for remainder_rows displays.
  if (strpos($display_id, 'remainder_rows') !== FALSE) {
    $suggestions[] = 'views_view_field__views_stratify__remainder_rows';
    $suggestions[] = 'views_view_field__' . $view->id() . '__remainder_rows';
  }

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_views_view_unformatted().
 *
 * Adds theme suggestions for unformatted style views with stratification.
 */
function yse_views_stratify_theme_suggestions_views_view_unformatted(array $variables): array {
  $suggestions = [];
  $view = $variables['view'];

  // Check if this view has an embed_stratify_query display.
  $displays = $view->storage->get('display');
  if (!isset($displays['embed_stratify_query'])) {
    return $suggestions;
  }

  // Add generic views-stratify suggestion.
  $suggestions[] = 'views_view_unformatted__views_stratify';

  $display_id = $view->current_display;

  // Add suggestions for exclusive_rows displays.
  if (strpos($display_id, 'exclusive_rows') !== FALSE) {
    $suggestions[] = 'views_view_unformatted__' . $view->id() . '__exclusive_rows';
    $suggestions[] = 'views_view_unformatted__views_stratify__exclusive_rows';
  }

  // Add suggestions for remainder_rows displays.
  if (strpos($display_id, 'remainder_rows') !== FALSE) {
    $suggestions[] = 'views_view_unformatted__' . $view->id() . '__remainder_rows';
    $suggestions[] = 'views_view_unformatted__views_stratify__remainder_rows';
  }

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_views_view_table().
 *
 * Adds theme suggestions for table style views with stratification.
 */
function yse_views_stratify_theme_suggestions_views_view_table(array $variables): array {
  $suggestions = [];
  $view = $variables['view'];

  // Check if this view has an embed_stratify_query display.
  $displays = $view->storage->get('display');
  if (!isset($displays['embed_stratify_query'])) {
    return $suggestions;
  }

  // Add generic views-stratify suggestion.
  $suggestions[] = 'views_view_table__views_stratify';

  $display_id = $view->current_display;

  // Add suggestions for exclusive_rows displays.
  if (strpos($display_id, 'exclusive_rows') !== FALSE) {
    $suggestions[] = 'views_view_table__' . $view->id() . '__exclusive_rows';
    $suggestions[] = 'views_view_table__views_stratify__exclusive_rows';
  }

  // Add suggestions for remainder_rows displays.
  if (strpos($display_id, 'remainder_rows') !== FALSE) {
    $suggestions[] = 'views_view_table__' . $view->id() . '__remainder_rows';
    $suggestions[] = 'views_view_table__views_stratify__remainder_rows';
  }

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_views_view_grid().
 *
 * Adds theme suggestions for grid style views with stratification.
 */
function yse_views_stratify_theme_suggestions_views_view_grid(array $variables): array {
  $suggestions = [];
  $view = $variables['view'];

  // Check if this view has an embed_stratify_query display.
  $displays = $view->storage->get('display');
  if (!isset($displays['embed_stratify_query'])) {
    return $suggestions;
  }

  // Add generic views-stratify suggestion.
  $suggestions[] = 'views_view_grid__views_stratify';

  $display_id = $view->current_display;

  // Add suggestions for exclusive_rows displays.
  if (strpos($display_id, 'exclusive_rows') !== FALSE) {
    $suggestions[] = 'views_view_grid__' . $view->id() . '__exclusive_rows';
    $suggestions[] = 'views_view_grid__views_stratify__exclusive_rows';
  }

  // Add suggestions for remainder_rows displays.
  if (strpos($display_id, 'remainder_rows') !== FALSE) {
    $suggestions[] = 'views_view_grid__' . $view->id() . '__remainder_rows';
    $suggestions[] = 'views_view_grid__views_stratify__remainder_rows';
  }

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_views_view_list().
 *
 * Adds theme suggestions for list style views with stratification.
 */
function yse_views_stratify_theme_suggestions_views_view_list(array $variables): array {
  $suggestions = [];
  $view = $variables['view'];

  // Check if this view has an embed_stratify_query display.
  $displays = $view->storage->get('display');
  if (!isset($displays['embed_stratify_query'])) {
    return $suggestions;
  }

  // Add generic views-stratify suggestion.
  $suggestions[] = 'views_view_list__views_stratify';

  $display_id = $view->current_display;

  // Add suggestions for exclusive_rows displays.
  if (strpos($display_id, 'exclusive_rows') !== FALSE) {
    $suggestions[] = 'views_view_list__' . $view->id() . '__exclusive_rows';
    $suggestions[] = 'views_view_list__views_stratify__exclusive_rows';
  }

  // Add suggestions for remainder_rows displays.
  if (strpos($display_id, 'remainder_rows') !== FALSE) {
    $suggestions[] = 'views_view_list__' . $view->id() . '__remainder_rows';
    $suggestions[] = 'views_view_list__views_stratify__remainder_rows';
  }

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_views_view_yse_slider().
 *
 * Adds theme suggestions for yse_slider style views with stratification.
 */
function yse_views_stratify_theme_suggestions_views_view_yse_slider(array $variables): array {
  $suggestions = [];
  $view = $variables['view'];

  // Check if this view has an embed_stratify_query display.
  $displays = $view->storage->get('display');
  if (!isset($displays['embed_stratify_query'])) {
    return $suggestions;
  }

  // Add generic views-stratify suggestion.
  $suggestions[] = 'views_view_yse_slider__views_stratify';

  $display_id = $view->current_display;

  // Add suggestions for exclusive_rows displays.
  if (strpos($display_id, 'exclusive_rows') !== FALSE) {
    $suggestions[] = 'views_view_yse_slider__' . $view->id() . '__exclusive_rows';
    $suggestions[] = 'views_view_yse_slider__views_stratify__exclusive_rows';
  }

  // Add suggestions for remainder_rows displays.
  if (strpos($display_id, 'remainder_rows') !== FALSE) {
    $suggestions[] = 'views_view_yse_slider__' . $view->id() . '__remainder_rows';
    $suggestions[] = 'views_view_yse_slider__views_stratify__remainder_rows';
  }

  return $suggestions;
}
